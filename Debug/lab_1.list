
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a4  080048a4  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ac  080048ac  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00012e18  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e28  20012e28  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcea  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002634  00000000  00000000  00013d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00016360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1b  00000000  00000000  000171d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022010  00000000  00000000  00017ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f77d  00000000  00000000  00039cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d057f  00000000  00000000  00049478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001199f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  00119a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004840 	.word	0x08004840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004840 	.word	0x08004840

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbcd 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82d 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f895 	bl	80005fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xQueue = xQueueCreate(1, sizeof(int));
 80004d2:	2200      	movs	r2, #0
 80004d4:	2104      	movs	r1, #4
 80004d6:	2001      	movs	r0, #1
 80004d8:	f001 ff46 	bl	8002368 <xQueueGenericCreate>
 80004dc:	4603      	mov	r3, r0
 80004de:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <main+0x54>)
 80004e0:	6013      	str	r3, [r2, #0]

  xTaskCreate(
 80004e2:	2300      	movs	r3, #0
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2280      	movs	r2, #128	@ 0x80
 80004ee:	490a      	ldr	r1, [pc, #40]	@ (8000518 <main+0x58>)
 80004f0:	480a      	ldr	r0, [pc, #40]	@ (800051c <main+0x5c>)
 80004f2:	f002 fb87 	bl	8002c04 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(
 80004f6:	2300      	movs	r3, #0
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	4907      	ldr	r1, [pc, #28]	@ (8000520 <main+0x60>)
 8000504:	4807      	ldr	r0, [pc, #28]	@ (8000524 <main+0x64>)
 8000506:	f002 fb7d 	bl	8002c04 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  NULL);

  vTaskStartScheduler();
 800050a:	f002 fcf1 	bl	8002ef0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	bf00      	nop
 8000510:	e7fd      	b.n	800050e <main+0x4e>
 8000512:	bf00      	nop
 8000514:	2000002c 	.word	0x2000002c
 8000518:	08004858 	.word	0x08004858
 800051c:	080008b5 	.word	0x080008b5
 8000520:	08004864 	.word	0x08004864
 8000524:	080009bd 	.word	0x080009bd

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 f948 	bl	80047cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800059c:	2332      	movs	r3, #50	@ 0x32
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a4:	2307      	movs	r3, #7
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fe65 	bl	800127c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b8:	f000 fa48 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f8c6 	bl	800176c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e6:	f000 fa31 	bl	8000a4c <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	@ 0x30
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	4ba1      	ldr	r3, [pc, #644]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4aa0      	ldr	r2, [pc, #640]	@ (800089c <MX_GPIO_Init+0x2a0>)
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b9e      	ldr	r3, [pc, #632]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	4b9a      	ldr	r3, [pc, #616]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b93      	ldr	r3, [pc, #588]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a92      	ldr	r2, [pc, #584]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b90      	ldr	r3, [pc, #576]	@ (800089c <MX_GPIO_Init+0x2a0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b8c      	ldr	r3, [pc, #560]	@ (800089c <MX_GPIO_Init+0x2a0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a8b      	ldr	r2, [pc, #556]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b89      	ldr	r3, [pc, #548]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b85      	ldr	r3, [pc, #532]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a84      	ldr	r2, [pc, #528]	@ (800089c <MX_GPIO_Init+0x2a0>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b82      	ldr	r3, [pc, #520]	@ (800089c <MX_GPIO_Init+0x2a0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b7e      	ldr	r3, [pc, #504]	@ (800089c <MX_GPIO_Init+0x2a0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a7d      	ldr	r2, [pc, #500]	@ (800089c <MX_GPIO_Init+0x2a0>)
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b7b      	ldr	r3, [pc, #492]	@ (800089c <MX_GPIO_Init+0x2a0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2108      	movs	r1, #8
 80006be:	4878      	ldr	r0, [pc, #480]	@ (80008a0 <MX_GPIO_Init+0x2a4>)
 80006c0:	f000 fda8 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4876      	ldr	r0, [pc, #472]	@ (80008a4 <MX_GPIO_Init+0x2a8>)
 80006ca:	f000 fda3 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80006ce:	2200      	movs	r2, #0
 80006d0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80006d4:	4874      	ldr	r0, [pc, #464]	@ (80008a8 <MX_GPIO_Init+0x2ac>)
 80006d6:	f000 fd9d 	bl	8001214 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006da:	2308      	movs	r3, #8
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	486b      	ldr	r0, [pc, #428]	@ (80008a0 <MX_GPIO_Init+0x2a4>)
 80006f2:	f000 fbdb 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4865      	ldr	r0, [pc, #404]	@ (80008a4 <MX_GPIO_Init+0x2a8>)
 800070e:	f000 fbcd 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000712:	2308      	movs	r3, #8
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000722:	2305      	movs	r3, #5
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	485d      	ldr	r0, [pc, #372]	@ (80008a4 <MX_GPIO_Init+0x2a8>)
 800072e:	f000 fbbd 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4859      	ldr	r0, [pc, #356]	@ (80008ac <MX_GPIO_Init+0x2b0>)
 8000746:	f000 fbb1 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800074a:	2310      	movs	r3, #16
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800075a:	2306      	movs	r3, #6
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4851      	ldr	r0, [pc, #324]	@ (80008ac <MX_GPIO_Init+0x2b0>)
 8000766:	f000 fba1 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800076a:	23e0      	movs	r3, #224	@ 0xe0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800077a:	2305      	movs	r3, #5
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4849      	ldr	r0, [pc, #292]	@ (80008ac <MX_GPIO_Init+0x2b0>)
 8000786:	f000 fb91 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800078a:	2304      	movs	r3, #4
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4844      	ldr	r0, [pc, #272]	@ (80008b0 <MX_GPIO_Init+0x2b4>)
 800079e:	f000 fb85 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b4:	2305      	movs	r3, #5
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	483c      	ldr	r0, [pc, #240]	@ (80008b0 <MX_GPIO_Init+0x2b4>)
 80007c0:	f000 fb74 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80007c4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80007c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4832      	ldr	r0, [pc, #200]	@ (80008a8 <MX_GPIO_Init+0x2ac>)
 80007de:	f000 fb65 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007e2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f4:	2306      	movs	r3, #6
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4829      	ldr	r0, [pc, #164]	@ (80008a4 <MX_GPIO_Init+0x2a8>)
 8000800:	f000 fb54 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4824      	ldr	r0, [pc, #144]	@ (80008ac <MX_GPIO_Init+0x2b0>)
 800081a:	f000 fb47 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800081e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000830:	230a      	movs	r3, #10
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	481c      	ldr	r0, [pc, #112]	@ (80008ac <MX_GPIO_Init+0x2b0>)
 800083c:	f000 fb36 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000840:	2320      	movs	r3, #32
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4815      	ldr	r0, [pc, #84]	@ (80008a8 <MX_GPIO_Init+0x2ac>)
 8000854:	f000 fb2a 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000858:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086a:	2304      	movs	r3, #4
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_GPIO_Init+0x2b4>)
 8000876:	f000 fb19 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800087e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_GPIO_Init+0x2a4>)
 8000890:	f000 fb0c 	bl	8000eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400

080008b4 <LEDTask_App>:

/* USER CODE BEGIN 4 */
void LEDTask_App(void *pvParameters)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	static unsigned int switch_msg = 0;
	/* Infinite loop */
	for(;;)
	{
		xQueueReceive(xQueue, &switch_msg, 1);
 80008bc:	4b3c      	ldr	r3, [pc, #240]	@ (80009b0 <LEDTask_App+0xfc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2201      	movs	r2, #1
 80008c2:	493c      	ldr	r1, [pc, #240]	@ (80009b4 <LEDTask_App+0x100>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 ff4d 	bl	8002764 <xQueueReceive>
		if(switch_msg == 0){
 80008ca:	4b3a      	ldr	r3, [pc, #232]	@ (80009b4 <LEDTask_App+0x100>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d144      	bne.n	800095c <LEDTask_App+0xa8>
			STATE0:
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <LEDTask_App+0x24>
				HAL_GPIO_TogglePin(led_orange_GPIO_Port, GPIO_PIN_13);
				xQueueReceive(xQueue, &switch_msg, 2000);
				HAL_GPIO_TogglePin(led_orange_GPIO_Port, GPIO_PIN_13);

				if (switch_msg == 0) {
					goto STATE0;
 80008d6:	bf00      	nop
				HAL_GPIO_TogglePin(led_red_GPIO_Port, GPIO_PIN_14);
 80008d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008dc:	4836      	ldr	r0, [pc, #216]	@ (80009b8 <LEDTask_App+0x104>)
 80008de:	f000 fcb2 	bl	8001246 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &switch_msg, 1000);
 80008e2:	4b33      	ldr	r3, [pc, #204]	@ (80009b0 <LEDTask_App+0xfc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ea:	4932      	ldr	r1, [pc, #200]	@ (80009b4 <LEDTask_App+0x100>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ff39 	bl	8002764 <xQueueReceive>
				HAL_GPIO_TogglePin(led_red_GPIO_Port, GPIO_PIN_14);
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	4830      	ldr	r0, [pc, #192]	@ (80009b8 <LEDTask_App+0x104>)
 80008f8:	f000 fca5 	bl	8001246 <HAL_GPIO_TogglePin>
				if (switch_msg == 1) {
 80008fc:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <LEDTask_App+0x100>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d030      	beq.n	8000966 <LEDTask_App+0xb2>
				HAL_GPIO_TogglePin(led_orange_GPIO_Port, GPIO_PIN_13);
 8000904:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000908:	482b      	ldr	r0, [pc, #172]	@ (80009b8 <LEDTask_App+0x104>)
 800090a:	f000 fc9c 	bl	8001246 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &switch_msg, 1000);
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <LEDTask_App+0xfc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000916:	4927      	ldr	r1, [pc, #156]	@ (80009b4 <LEDTask_App+0x100>)
 8000918:	4618      	mov	r0, r3
 800091a:	f001 ff23 	bl	8002764 <xQueueReceive>
				HAL_GPIO_TogglePin(led_red_GPIO_Port, GPIO_PIN_13);
 800091e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000922:	4825      	ldr	r0, [pc, #148]	@ (80009b8 <LEDTask_App+0x104>)
 8000924:	f000 fc8f 	bl	8001246 <HAL_GPIO_TogglePin>
				if (switch_msg == 1) {
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <LEDTask_App+0x100>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d01c      	beq.n	800096a <LEDTask_App+0xb6>
				HAL_GPIO_TogglePin(led_green_GPIO_Port, GPIO_PIN_12);
 8000930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000934:	4820      	ldr	r0, [pc, #128]	@ (80009b8 <LEDTask_App+0x104>)
 8000936:	f000 fc86 	bl	8001246 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &switch_msg, 1000);
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <LEDTask_App+0xfc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000942:	491c      	ldr	r1, [pc, #112]	@ (80009b4 <LEDTask_App+0x100>)
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ff0d 	bl	8002764 <xQueueReceive>
				HAL_GPIO_TogglePin(led_green_GPIO_Port, GPIO_PIN_12);
 800094a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800094e:	481a      	ldr	r0, [pc, #104]	@ (80009b8 <LEDTask_App+0x104>)
 8000950:	f000 fc79 	bl	8001246 <HAL_GPIO_TogglePin>
				if (switch_msg == 1) {
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <LEDTask_App+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d008      	beq.n	800096e <LEDTask_App+0xba>
		if(switch_msg == 1){
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <LEDTask_App+0x100>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d1ab      	bne.n	80008bc <LEDTask_App+0x8>
			STATE1:
 8000964:	e004      	b.n	8000970 <LEDTask_App+0xbc>
					goto STATE1;
 8000966:	bf00      	nop
 8000968:	e002      	b.n	8000970 <LEDTask_App+0xbc>
					goto STATE1;
 800096a:	bf00      	nop
 800096c:	e000      	b.n	8000970 <LEDTask_App+0xbc>
					goto STATE1;
 800096e:	bf00      	nop
				HAL_GPIO_TogglePin(led_orange_GPIO_Port, GPIO_PIN_13);
 8000970:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <LEDTask_App+0x104>)
 8000976:	f000 fc66 	bl	8001246 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &switch_msg, 2000);
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <LEDTask_App+0xfc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <LEDTask_App+0x100>)
 8000984:	4618      	mov	r0, r3
 8000986:	f001 feed 	bl	8002764 <xQueueReceive>
				HAL_GPIO_TogglePin(led_orange_GPIO_Port, GPIO_PIN_13);
 800098a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098e:	480a      	ldr	r0, [pc, #40]	@ (80009b8 <LEDTask_App+0x104>)
 8000990:	f000 fc59 	bl	8001246 <HAL_GPIO_TogglePin>
				if (switch_msg == 0) {
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <LEDTask_App+0x100>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d09c      	beq.n	80008d6 <LEDTask_App+0x22>
				}
				xQueueReceive(xQueue, &switch_msg, 2000);
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <LEDTask_App+0xfc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009a4:	4903      	ldr	r1, [pc, #12]	@ (80009b4 <LEDTask_App+0x100>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fedc 	bl	8002764 <xQueueReceive>
		xQueueReceive(xQueue, &switch_msg, 1);
 80009ac:	e786      	b.n	80008bc <LEDTask_App+0x8>
 80009ae:	bf00      	nop
 80009b0:	2000002c 	.word	0x2000002c
 80009b4:	20000030 	.word	0x20000030
 80009b8:	40020c00 	.word	0x40020c00

080009bc <BUTTONTask_App>:
		}
	}
}

void BUTTONTask_App(void *pvParameters)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	static uint16_t buttonState = 0;
	    static unsigned int LEDstate = 0;

	    while (1) {
	    	buttonState = (buttonState << 1) | HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0) | 0xFE00;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <BUTTONTask_App+0x5c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	b21c      	sxth	r4, r3
 80009cc:	2101      	movs	r1, #1
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <BUTTONTask_App+0x60>)
 80009d0:	f000 fc08 	bl	80011e4 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4323      	orrs	r3, r4
 80009da:	b21b      	sxth	r3, r3
 80009dc:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 80009e0:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <BUTTONTask_App+0x5c>)
 80009ea:	801a      	strh	r2, [r3, #0]

	        if (buttonState == 0xFF00) {
 80009ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <BUTTONTask_App+0x5c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80009f4:	d10c      	bne.n	8000a10 <BUTTONTask_App+0x54>
	        	LEDstate ^= 1;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <BUTTONTask_App+0x64>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <BUTTONTask_App+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]
	        	xQueueSend(xQueue, (int *) &LEDstate, 1);
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <BUTTONTask_App+0x68>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4905      	ldr	r1, [pc, #20]	@ (8000a20 <BUTTONTask_App+0x64>)
 8000a0c:	f001 fd0c 	bl	8002428 <xQueueGenericSend>
	        }

	        vTaskDelay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 fa37 	bl	8002e84 <vTaskDelay>
	    	buttonState = (buttonState << 1) | HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0) | 0xFE00;
 8000a16:	e7d5      	b.n	80009c4 <BUTTONTask_App+0x8>
 8000a18:	20000034 	.word	0x20000034
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	20000038 	.word	0x20000038
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3a:	f000 f935 	bl	8000ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40001400 	.word	0x40001400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <HAL_InitTick+0xe4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a32      	ldr	r2, [pc, #200]	@ (8000b8c <HAL_InitTick+0xe4>)
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac8:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <HAL_InitTick+0xe4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f850 	bl	8001b84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aee:	f001 f835 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8000af2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000af4:	e004      	b.n	8000b00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000af6:	f001 f831 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8000afa:	4603      	mov	r3, r0
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b02:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <HAL_InitTick+0xe8>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	0c9b      	lsrs	r3, r3, #18
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_InitTick+0xf0>)
 8000b12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b1a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b20:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000b34:	4817      	ldr	r0, [pc, #92]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b36:	f001 f857 	bl	8001be8 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d11b      	bne.n	8000b80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <HAL_InitTick+0xec>)
 8000b4a:	f001 f8a7 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d111      	bne.n	8000b80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b5c:	2037      	movs	r0, #55	@ 0x37
 8000b5e:	f000 f997 	bl	8000e90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d808      	bhi.n	8000b7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2037      	movs	r0, #55	@ 0x37
 8000b6e:	f000 f973 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_InitTick+0xf4>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e002      	b.n	8000b80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3738      	adds	r7, #56	@ 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	40001400 	.word	0x40001400
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <TIM7_IRQHandler+0x10>)
 8000bde:	f001 f8cd 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000003c 	.word	0x2000003c

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 fdcd 	bl	80047dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc3d 	bl	80004c0 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c54:	080048b4 	.word	0x080048b4
  ldr r2, =_sbss
 8000c58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c5c:	20012e28 	.word	0x20012e28

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f8d8 	bl	8000e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff08 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fede 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000084 	.word	0x20000084

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000084 	.word	0x20000084

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff4c 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff61 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffb1 	bl	8000ddc <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff80 	bl	8000d88 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e16b      	b.n	80011a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 815a 	bne.w	800119a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d017      	beq.n	8000f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80b4 	beq.w	800119a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b60      	ldr	r3, [pc, #384]	@ (80011b8 <HAL_GPIO_Init+0x30c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a5f      	ldr	r2, [pc, #380]	@ (80011b8 <HAL_GPIO_Init+0x30c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b5d      	ldr	r3, [pc, #372]	@ (80011b8 <HAL_GPIO_Init+0x30c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a5b      	ldr	r2, [pc, #364]	@ (80011bc <HAL_GPIO_Init+0x310>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a52      	ldr	r2, [pc, #328]	@ (80011c0 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d02b      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a51      	ldr	r2, [pc, #324]	@ (80011c4 <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d025      	beq.n	80010ce <HAL_GPIO_Init+0x222>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a50      	ldr	r2, [pc, #320]	@ (80011c8 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x21e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4f      	ldr	r2, [pc, #316]	@ (80011cc <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4e      	ldr	r2, [pc, #312]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4d      	ldr	r2, [pc, #308]	@ (80011d4 <HAL_GPIO_Init+0x328>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x212>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	@ (80011d8 <HAL_GPIO_Init+0x32c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x20e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4b      	ldr	r2, [pc, #300]	@ (80011dc <HAL_GPIO_Init+0x330>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x20a>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00e      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010b6:	2308      	movs	r3, #8
 80010b8:	e00c      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010ba:	2306      	movs	r3, #6
 80010bc:	e00a      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010be:	2305      	movs	r3, #5
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x228>
 80010d2:	2300      	movs	r3, #0
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	@ (80011bc <HAL_GPIO_Init+0x310>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116a:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <HAL_GPIO_Init+0x334>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	f67f ae90 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40021400 	.word	0x40021400
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40021c00 	.word	0x40021c00
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e001      	b.n	8001206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	041a      	lsls	r2, r3, #16
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43d9      	mvns	r1, r3
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	400b      	ands	r3, r1
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e267      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d075      	beq.n	8001386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800129a:	4b88      	ldr	r3, [pc, #544]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4b85      	ldr	r3, [pc, #532]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d112      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b82      	ldr	r3, [pc, #520]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012be:	d10b      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	4b7e      	ldr	r3, [pc, #504]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d05b      	beq.n	8001384 <HAL_RCC_OscConfig+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d157      	bne.n	8001384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e242      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e0:	d106      	bne.n	80012f0 <HAL_RCC_OscConfig+0x74>
 80012e2:	4b76      	ldr	r3, [pc, #472]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a75      	ldr	r2, [pc, #468]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e01d      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x98>
 80012fa:	4b70      	ldr	r3, [pc, #448]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6f      	ldr	r2, [pc, #444]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b6d      	ldr	r3, [pc, #436]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6c      	ldr	r2, [pc, #432]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 8001314:	4b69      	ldr	r3, [pc, #420]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a68      	ldr	r2, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b66      	ldr	r3, [pc, #408]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a65      	ldr	r2, [pc, #404]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fccc 	bl	8000cd0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcc8 	bl	8000cd0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e207      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b5b      	ldr	r3, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0xc0>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcb8 	bl	8000cd0 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcb4 	bl	8000cd0 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1f3      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	4b51      	ldr	r3, [pc, #324]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0xe8>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d063      	beq.n	800145a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b47      	ldr	r3, [pc, #284]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d11c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e1c7      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4937      	ldr	r1, [pc, #220]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	e03a      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <HAL_RCC_OscConfig+0x244>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fc6d 	bl	8000cd0 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc69 	bl	8000cd0 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1a8      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4925      	ldr	r1, [pc, #148]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e015      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <HAL_RCC_OscConfig+0x244>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc4c 	bl	8000cd0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc48 	bl	8000cd0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e187      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d036      	beq.n	80014d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d016      	beq.n	800149c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_RCC_OscConfig+0x248>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fc2c 	bl	8000cd0 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fc28 	bl	8000cd0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e167      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_RCC_OscConfig+0x240>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x200>
 800149a:	e01b      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_RCC_OscConfig+0x248>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc15 	bl	8000cd0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e00e      	b.n	80014c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc11 	bl	8000cd0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d907      	bls.n	80014c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e150      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ea      	bne.n	80014aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8097 	beq.w	8001610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b81      	ldr	r3, [pc, #516]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b7d      	ldr	r3, [pc, #500]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a7c      	ldr	r2, [pc, #496]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b7a      	ldr	r3, [pc, #488]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b77      	ldr	r3, [pc, #476]	@ (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151e:	4b74      	ldr	r3, [pc, #464]	@ (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a73      	ldr	r2, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff fbd1 	bl	8000cd0 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff fbcd 	bl	8000cd0 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e10c      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b6a      	ldr	r3, [pc, #424]	@ (80016f0 <HAL_RCC_OscConfig+0x474>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x2ea>
 8001558:	4b64      	ldr	r3, [pc, #400]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a63      	ldr	r2, [pc, #396]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
 8001564:	e01c      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x30c>
 800156e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	4a5e      	ldr	r2, [pc, #376]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	@ 0x70
 800157a:	4b5c      	ldr	r3, [pc, #368]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5b      	ldr	r2, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0x324>
 8001588:	4b58      	ldr	r3, [pc, #352]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a57      	ldr	r2, [pc, #348]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
 8001594:	4b55      	ldr	r3, [pc, #340]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a54      	ldr	r2, [pc, #336]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0304 	bic.w	r3, r3, #4
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d015      	beq.n	80015d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb92 	bl	8000cd0 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb8e 	bl	8000cd0 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0cb      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	4b49      	ldr	r3, [pc, #292]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ee      	beq.n	80015b0 <HAL_RCC_OscConfig+0x334>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb7c 	bl	8000cd0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb78 	bl	8000cd0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0b5      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ee      	bne.n	80015dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001604:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	4a38      	ldr	r2, [pc, #224]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a1 	beq.w	800175c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d05c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d141      	bne.n	80016b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb4c 	bl	8000cd0 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fb48 	bl	8000cd0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e087      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	3b01      	subs	r3, #1
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_RCC_OscConfig+0x478>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb21 	bl	8000cd0 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb1d 	bl	8000cd0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e05c      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x416>
 80016b0:	e054      	b.n	800175c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_RCC_OscConfig+0x478>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb0a 	bl	8000cd0 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb06 	bl	8000cd0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e045      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_RCC_OscConfig+0x470>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x444>
 80016de:	e03d      	b.n	800175c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e038      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x4ec>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d028      	beq.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d121      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11a      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001728:	4013      	ands	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800172e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001730:	4293      	cmp	r3, r2
 8001732:	d111      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	3b01      	subs	r3, #1
 8001742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0cc      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b68      	ldr	r3, [pc, #416]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d90c      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d044      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e067      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4934      	ldr	r1, [pc, #208]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff fa38 	bl	8000cd0 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fa34 	bl	8000cd0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e04f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d20c      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f8c8 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	0800488c 	.word	0x0800488c
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b094      	sub	sp, #80	@ 0x50
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b79      	ldr	r3, [pc, #484]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80e1 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e0db      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800196e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001970:	e0db      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b73      	ldr	r3, [pc, #460]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001976:	e0d8      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b6f      	ldr	r3, [pc, #444]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001980:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b6d      	ldr	r3, [pc, #436]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001998:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800199a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019aa:	4622      	mov	r2, r4
 80019ac:	462b      	mov	r3, r5
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	0159      	lsls	r1, r3, #5
 80019b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019bc:	0150      	lsls	r0, r2, #5
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4621      	mov	r1, r4
 80019c4:	1a51      	subs	r1, r2, r1
 80019c6:	6139      	str	r1, [r7, #16]
 80019c8:	4629      	mov	r1, r5
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019dc:	4659      	mov	r1, fp
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	4651      	mov	r1, sl
 80019e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e6:	4651      	mov	r1, sl
 80019e8:	018a      	lsls	r2, r1, #6
 80019ea:	4651      	mov	r1, sl
 80019ec:	ebb2 0801 	subs.w	r8, r2, r1
 80019f0:	4659      	mov	r1, fp
 80019f2:	eb63 0901 	sbc.w	r9, r3, r1
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a0a:	4690      	mov	r8, r2
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	eb18 0303 	adds.w	r3, r8, r3
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	462b      	mov	r3, r5
 8001a18:	eb49 0303 	adc.w	r3, r9, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	024b      	lsls	r3, r1, #9
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a34:	4621      	mov	r1, r4
 8001a36:	024a      	lsls	r2, r1, #9
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a48:	f7fe fbc2 	bl	80001d0 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4611      	mov	r1, r2
 8001a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a70:	4642      	mov	r2, r8
 8001a72:	464b      	mov	r3, r9
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	0159      	lsls	r1, r3, #5
 8001a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a82:	0150      	lsls	r0, r2, #5
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a8e:	4649      	mov	r1, r9
 8001a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aac:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	00eb      	lsls	r3, r5, #3
 8001aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001abe:	00e2      	lsls	r2, r4, #3
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	18e3      	adds	r3, r4, r3
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	464b      	mov	r3, r9
 8001acc:	eb45 0303 	adc.w	r3, r5, r3
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ade:	4629      	mov	r1, r5
 8001ae0:	028b      	lsls	r3, r1, #10
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae8:	4621      	mov	r1, r4
 8001aea:	028a      	lsls	r2, r1, #10
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001af2:	2200      	movs	r2, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	61fa      	str	r2, [r7, #28]
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fb68 	bl	80001d0 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3750      	adds	r7, #80	@ 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	@ (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	0800489c 	.word	0x0800489c

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9c0 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04e      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cde:	d01d      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0202 	mvn.w	r2, #2
 8001db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8d2 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8c4 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8d5 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d020      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8ac 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89e 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8af 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d020      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0208 	mvn.w	r2, #8
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f886 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f878 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f889 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0210 	mvn.w	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f860 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f852 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f863 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0201 	mvn.w	r2, #1
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fda0 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f906 	bl	8002118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f834 	bl	8001f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8d8 	bl	8002104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a46      	ldr	r2, [pc, #280]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a43      	ldr	r2, [pc, #268]	@ (80020dc <TIM_Base_SetConfig+0x130>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	@ (80020e0 <TIM_Base_SetConfig+0x134>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a41      	ldr	r2, [pc, #260]	@ (80020e4 <TIM_Base_SetConfig+0x138>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a35      	ldr	r2, [pc, #212]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200c:	d027      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a32      	ldr	r2, [pc, #200]	@ (80020dc <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d023      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <TIM_Base_SetConfig+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a30      	ldr	r2, [pc, #192]	@ (80020e4 <TIM_Base_SetConfig+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <TIM_Base_SetConfig+0x140>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <TIM_Base_SetConfig+0x144>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <TIM_Base_SetConfig+0x148>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	@ (80020f8 <TIM_Base_SetConfig+0x14c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <TIM_Base_SetConfig+0x150>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a29      	ldr	r2, [pc, #164]	@ (8002100 <TIM_Base_SetConfig+0x154>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <TIM_Base_SetConfig+0x13c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
  }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800
 80020f8:	40001800 	.word	0x40001800
 80020fc:	40001c00 	.word	0x40001c00
 8002100:	40002000 	.word	0x40002000

08002104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 0208 	add.w	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002144:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f103 0208 	add.w	r2, r3, #8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0208 	add.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021e4:	d103      	bne.n	80021ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e00c      	b.n	8002208 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3308      	adds	r3, #8
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e002      	b.n	80021fc <vListInsert+0x2e>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d2f6      	bcs.n	80021f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d103      	bne.n	8002274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022c0:	f001 ff82 	bl	80041c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	441a      	add	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f0:	3b01      	subs	r3, #1
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	22ff      	movs	r2, #255	@ 0xff
 8002304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	22ff      	movs	r2, #255	@ 0xff
 800230c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01a      	beq.n	8002354 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3310      	adds	r3, #16
 8002322:	4618      	mov	r0, r3
 8002324:	f001 f856 	bl	80033d4 <xTaskRemoveFromEventList>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800232e:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <xQueueGenericReset+0xd0>)
 8002330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	e009      	b.n	8002354 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3310      	adds	r3, #16
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fef1 	bl	800212c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3324      	adds	r3, #36	@ 0x24
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff feec 	bl	800212c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002354:	f001 ff6a 	bl	800422c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000ed04 	.word	0xe000ed04

08002368 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	@ 0x28
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <xQueueGenericCreate+0x2c>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	613b      	str	r3, [r7, #16]
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e004      	b.n	80023aa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3350      	adds	r3, #80	@ 0x50
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 f82c 	bl	800440c <pvPortMalloc>
 80023b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3350      	adds	r3, #80	@ 0x50
 80023c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f805 	bl	80023e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023d8:	69bb      	ldr	r3, [r7, #24]
	}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e002      	b.n	8002404 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002410:	2101      	movs	r1, #1
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f7ff ff3e 	bl	8002294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	@ 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800243e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <xQueueGenericSend+0x34>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <xQueueGenericSend+0x42>
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0x46>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0x48>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <xQueueGenericSend+0x64>
	__asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d103      	bne.n	800249a <xQueueGenericSend+0x72>
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <xQueueGenericSend+0x76>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <xQueueGenericSend+0x78>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <xQueueGenericSend+0x94>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	623b      	str	r3, [r7, #32]
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024bc:	f001 f92a 	bl	8003714 <xTaskGetSchedulerState>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <xQueueGenericSend+0xa4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <xQueueGenericSend+0xa8>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <xQueueGenericSend+0xaa>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <xQueueGenericSend+0xc6>
	__asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	61fb      	str	r3, [r7, #28]
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	e7fd      	b.n	80024ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ee:	f001 fe6b 	bl	80041c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <xQueueGenericSend+0xdc>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d129      	bne.n	8002558 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800250a:	f000 fa0d 	bl	8002928 <prvCopyDataToQueue>
 800250e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	3324      	adds	r3, #36	@ 0x24
 800251c:	4618      	mov	r0, r3
 800251e:	f000 ff59 	bl	80033d4 <xTaskRemoveFromEventList>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002528:	4b3f      	ldr	r3, [pc, #252]	@ (8002628 <xQueueGenericSend+0x200>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	e00a      	b.n	8002550 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800253a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002540:	4b39      	ldr	r3, [pc, #228]	@ (8002628 <xQueueGenericSend+0x200>)
 8002542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002550:	f001 fe6c 	bl	800422c <vPortExitCritical>
				return pdPASS;
 8002554:	2301      	movs	r3, #1
 8002556:	e063      	b.n	8002620 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800255e:	f001 fe65 	bl	800422c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002562:	2300      	movs	r3, #0
 8002564:	e05c      	b.n	8002620 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4618      	mov	r0, r3
 8002572:	f000 ff93 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002576:	2301      	movs	r3, #1
 8002578:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800257a:	f001 fe57 	bl	800422c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800257e:	f000 fd05 	bl	8002f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002582:	f001 fe21 	bl	80041c8 <vPortEnterCritical>
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800258c:	b25b      	sxtb	r3, r3
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002592:	d103      	bne.n	800259c <xQueueGenericSend+0x174>
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025a8:	d103      	bne.n	80025b2 <xQueueGenericSend+0x18a>
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025b2:	f001 fe3b 	bl	800422c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b6:	1d3a      	adds	r2, r7, #4
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 ff82 	bl	80034c8 <xTaskCheckForTimeOut>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d124      	bne.n	8002614 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025cc:	f000 faa4 	bl	8002b18 <prvIsQueueFull>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	3310      	adds	r3, #16
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fea6 	bl	8003330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e6:	f000 fa2f 	bl	8002a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025ea:	f000 fcdd 	bl	8002fa8 <xTaskResumeAll>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f af7c 	bne.w	80024ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <xQueueGenericSend+0x200>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	e772      	b.n	80024ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800260a:	f000 fa1d 	bl	8002a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800260e:	f000 fccb 	bl	8002fa8 <xTaskResumeAll>
 8002612:	e76c      	b.n	80024ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002616:	f000 fa17 	bl	8002a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800261a:	f000 fcc5 	bl	8002fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800261e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002620:	4618      	mov	r0, r3
 8002622:	3738      	adds	r7, #56	@ 0x38
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	@ 0x38
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <xQueueGenericSendFromISR+0x3e>
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <xQueueGenericSendFromISR+0x42>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSendFromISR+0x44>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	623b      	str	r3, [r7, #32]
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSendFromISR+0x6e>
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSendFromISR+0x72>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSendFromISR+0x74>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61fb      	str	r3, [r7, #28]
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026bc:	f001 fe64 	bl	8004388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026c0:	f3ef 8211 	mrs	r2, BASEPRI
 80026c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	61ba      	str	r2, [r7, #24]
 80026d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <xQueueGenericSendFromISR+0xc2>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d12c      	bne.n	8002748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026fe:	f000 f913 	bl	8002928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002702:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270a:	d112      	bne.n	8002732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d016      	beq.n	8002742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	3324      	adds	r3, #36	@ 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fe5b 	bl	80033d4 <xTaskRemoveFromEventList>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e007      	b.n	8002742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002736:	3301      	adds	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	b25a      	sxtb	r2, r3
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002742:	2301      	movs	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002746:	e001      	b.n	800274c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800275a:	4618      	mov	r0, r3
 800275c:	3738      	adds	r7, #56	@ 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	@ 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <xQueueReceive+0x32>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	623b      	str	r3, [r7, #32]
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	e7fd      	b.n	8002792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <xQueueReceive+0x40>
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <xQueueReceive+0x44>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <xQueueReceive+0x46>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <xQueueReceive+0x62>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	61fb      	str	r3, [r7, #28]
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c6:	f000 ffa5 	bl	8003714 <xTaskGetSchedulerState>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <xQueueReceive+0x72>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <xQueueReceive+0x76>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <xQueueReceive+0x78>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <xQueueReceive+0x94>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	61bb      	str	r3, [r7, #24]
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027f8:	f001 fce6 	bl	80041c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01f      	beq.n	8002848 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280c:	f000 f8f6 	bl	80029fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00f      	beq.n	8002840 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	3310      	adds	r3, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fdd5 	bl	80033d4 <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002830:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <xQueueReceive+0x1c0>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002840:	f001 fcf4 	bl	800422c <vPortExitCritical>
				return pdPASS;
 8002844:	2301      	movs	r3, #1
 8002846:	e069      	b.n	800291c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800284e:	f001 fced 	bl	800422c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002852:	2300      	movs	r3, #0
 8002854:	e062      	b.n	800291c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fe1b 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002866:	2301      	movs	r3, #1
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800286a:	f001 fcdf 	bl	800422c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800286e:	f000 fb8d 	bl	8002f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002872:	f001 fca9 	bl	80041c8 <vPortEnterCritical>
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800287c:	b25b      	sxtb	r3, r3
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002882:	d103      	bne.n	800288c <xQueueReceive+0x128>
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x13e>
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028a2:	f001 fcc3 	bl	800422c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a6:	1d3a      	adds	r2, r7, #4
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fe0a 	bl	80034c8 <xTaskCheckForTimeOut>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d123      	bne.n	8002902 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028bc:	f000 f916 	bl	8002aec <prvIsQueueEmpty>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fd2e 	bl	8003330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028d6:	f000 f8b7 	bl	8002a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028da:	f000 fb65 	bl	8002fa8 <xTaskResumeAll>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d189      	bne.n	80027f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <xQueueReceive+0x1c0>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e780      	b.n	80027f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028f8:	f000 f8a6 	bl	8002a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028fc:	f000 fb54 	bl	8002fa8 <xTaskResumeAll>
 8002900:	e77a      	b.n	80027f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002904:	f000 f8a0 	bl	8002a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002908:	f000 fb4e 	bl	8002fa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800290e:	f000 f8ed 	bl	8002aec <prvIsQueueEmpty>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f43f af6f 	beq.w	80027f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800291a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800291c:	4618      	mov	r0, r3
 800291e:	3730      	adds	r7, #48	@ 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14d      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fefc 	bl	8003750 <xTaskPriorityDisinherit>
 8002958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e043      	b.n	80029ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d119      	bne.n	800299c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6858      	ldr	r0, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	461a      	mov	r2, r3
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	f001 ff56 	bl	8004824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	441a      	add	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d32b      	bcc.n	80029ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e026      	b.n	80029ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68d8      	ldr	r0, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	f001 ff3c 	bl	8004824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	425b      	negs	r3, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	425b      	negs	r3, r3
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d105      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80029f2:	697b      	ldr	r3, [r7, #20]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d303      	bcc.n	8002a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f001 fef2 	bl	8004824 <memcpy>
	}
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a50:	f001 fbba 	bl	80041c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5c:	e011      	b.n	8002a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3324      	adds	r3, #36	@ 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fcb2 	bl	80033d4 <xTaskRemoveFromEventList>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a76:	f000 fd8b 	bl	8003590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	dce9      	bgt.n	8002a5e <prvUnlockQueue+0x16>
 8002a8a:	e000      	b.n	8002a8e <prvUnlockQueue+0x46>
					break;
 8002a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	22ff      	movs	r2, #255	@ 0xff
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a96:	f001 fbc9 	bl	800422c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a9a:	f001 fb95 	bl	80041c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aa6:	e011      	b.n	8002acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fc8d 	bl	80033d4 <xTaskRemoveFromEventList>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ac0:	f000 fd66 	bl	8003590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	dce9      	bgt.n	8002aa8 <prvUnlockQueue+0x60>
 8002ad4:	e000      	b.n	8002ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ae0:	f001 fba4 	bl	800422c <vPortExitCritical>
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002af4:	f001 fb68 	bl	80041c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b00:	2301      	movs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e001      	b.n	8002b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b0a:	f001 fb8f 	bl	800422c <vPortExitCritical>

	return xReturn;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b20:	f001 fb52 	bl	80041c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d102      	bne.n	8002b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e001      	b.n	8002b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b3a:	f001 fb77 	bl	800422c <vPortExitCritical>

	return xReturn;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e014      	b.n	8002b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b58:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <vQueueAddToRegistry+0x50>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b7a:	e006      	b.n	8002b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d9e7      	bls.n	8002b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000088 	.word	0x20000088

08002b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bac:	f001 fb0c 	bl	80041c8 <vPortEnterCritical>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bbc:	d103      	bne.n	8002bc6 <vQueueWaitForMessageRestricted+0x2a>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd2:	d103      	bne.n	8002bdc <vQueueWaitForMessageRestricted+0x40>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bdc:	f001 fb26 	bl	800422c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3324      	adds	r3, #36	@ 0x24
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fbc3 	bl	800337c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff26 	bl	8002a48 <prvUnlockQueue>
	}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	@ 0x30
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fbf7 	bl	800440c <pvPortMalloc>
 8002c1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c26:	2058      	movs	r0, #88	@ 0x58
 8002c28:	f001 fbf0 	bl	800440c <pvPortMalloc>
 8002c2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c3a:	e005      	b.n	8002c48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	f001 fcad 	bl	800459c <vPortFree>
 8002c42:	e001      	b.n	8002c48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	2300      	movs	r3, #0
 8002c52:	9303      	str	r3, [sp, #12]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f80e 	bl	8002c86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c6a:	69f8      	ldr	r0, [r7, #28]
 8002c6c:	f000 f89c 	bl	8002da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c70:	2301      	movs	r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e002      	b.n	8002c7c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b088      	sub	sp, #32
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	21a5      	movs	r1, #165	@ 0xa5
 8002ca0:	f001 fd94 	bl	80047cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f023 0307 	bic.w	r3, r3, #7
 8002cbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00b      	beq.n	8002ce0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	617b      	str	r3, [r7, #20]
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01f      	beq.n	8002d26 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	e012      	b.n	8002d12 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7819      	ldrb	r1, [r3, #0]
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3334      	adds	r3, #52	@ 0x34
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d9e9      	bls.n	8002cec <prvInitialiseNewTask+0x66>
 8002d18:	e000      	b.n	8002d1c <prvInitialiseNewTask+0x96>
			{
				break;
 8002d1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d24:	e003      	b.n	8002d2e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d901      	bls.n	8002d38 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d34:	2304      	movs	r3, #4
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d42:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fa0c 	bl	800216c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	3318      	adds	r3, #24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fa07 	bl	800216c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	f1c3 0205 	rsb	r2, r3, #5
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	69b8      	ldr	r0, [r7, #24]
 8002d88:	f001 f8ee 	bl	8003f68 <pxPortInitialiseStack>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d9e:	bf00      	nop
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002db0:	f001 fa0a 	bl	80041c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002db4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <prvAddNewTaskToReadyList+0xc0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a2b      	ldr	r2, [pc, #172]	@ (8002e68 <prvAddNewTaskToReadyList+0xc0>)
 8002dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dc6:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dcc:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <prvAddNewTaskToReadyList+0xc0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d110      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dd4:	f000 fc00 	bl	80035d8 <prvInitialiseTaskLists>
 8002dd8:	e00d      	b.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dda:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <prvAddNewTaskToReadyList+0xc8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d802      	bhi.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002df0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002df6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <prvAddNewTaskToReadyList+0xcc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <prvAddNewTaskToReadyList+0xcc>)
 8002dfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e00:	4b1c      	ldr	r3, [pc, #112]	@ (8002e74 <prvAddNewTaskToReadyList+0xcc>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <prvAddNewTaskToReadyList+0xd0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	4a18      	ldr	r2, [pc, #96]	@ (8002e78 <prvAddNewTaskToReadyList+0xd0>)
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4a15      	ldr	r2, [pc, #84]	@ (8002e7c <prvAddNewTaskToReadyList+0xd4>)
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7ff f9a8 	bl	8002186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e36:	f001 f9f9 	bl	800422c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <prvAddNewTaskToReadyList+0xc8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00e      	beq.n	8002e60 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <prvAddNewTaskToReadyList+0xc4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <prvAddNewTaskToReadyList+0xd8>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200001a0 	.word	0x200001a0
 8002e6c:	200000c8 	.word	0x200000c8
 8002e70:	200001ac 	.word	0x200001ac
 8002e74:	200001bc 	.word	0x200001bc
 8002e78:	200001a8 	.word	0x200001a8
 8002e7c:	200000cc 	.word	0x200000cc
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <vTaskDelay+0x64>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <vTaskDelay+0x32>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002eb6:	f000 f869 	bl	8002f8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eba:	2100      	movs	r1, #0
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fccf 	bl	8003860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ec2:	f000 f871 	bl	8002fa8 <xTaskResumeAll>
 8002ec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <vTaskDelay+0x68>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001c8 	.word	0x200001c8
 8002eec:	e000ed04 	.word	0xe000ed04

08002ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <vTaskStartScheduler+0x84>)
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2300      	movs	r3, #0
 8002f00:	2282      	movs	r2, #130	@ 0x82
 8002f02:	491d      	ldr	r1, [pc, #116]	@ (8002f78 <vTaskStartScheduler+0x88>)
 8002f04:	481d      	ldr	r0, [pc, #116]	@ (8002f7c <vTaskStartScheduler+0x8c>)
 8002f06:	f7ff fe7d 	bl	8002c04 <xTaskCreate>
 8002f0a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002f12:	f000 fd0b 	bl	800392c <xTimerCreateTimerTask>
 8002f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d116      	bne.n	8002f4c <vTaskStartScheduler+0x5c>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60bb      	str	r3, [r7, #8]
}
 8002f30:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <vTaskStartScheduler+0x90>)
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <vTaskStartScheduler+0x94>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <vTaskStartScheduler+0x98>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f46:	f001 f89b 	bl	8004080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f4a:	e00f      	b.n	8002f6c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f52:	d10b      	bne.n	8002f6c <vTaskStartScheduler+0x7c>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	607b      	str	r3, [r7, #4]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <vTaskStartScheduler+0x78>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200001c4 	.word	0x200001c4
 8002f78:	08004874 	.word	0x08004874
 8002f7c:	080035a9 	.word	0x080035a9
 8002f80:	200001c0 	.word	0x200001c0
 8002f84:	200001ac 	.word	0x200001ac
 8002f88:	200001a4 	.word	0x200001a4

08002f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a03      	ldr	r2, [pc, #12]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	200001c8 	.word	0x200001c8

08002fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fb6:	4b42      	ldr	r3, [pc, #264]	@ (80030c0 <xTaskResumeAll+0x118>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fd6:	f001 f8f7 	bl	80041c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fda:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <xTaskResumeAll+0x118>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a37      	ldr	r2, [pc, #220]	@ (80030c0 <xTaskResumeAll+0x118>)
 8002fe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <xTaskResumeAll+0x118>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d161      	bne.n	80030b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fec:	4b35      	ldr	r3, [pc, #212]	@ (80030c4 <xTaskResumeAll+0x11c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05d      	beq.n	80030b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff4:	e02e      	b.n	8003054 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff6:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <xTaskResumeAll+0x120>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3318      	adds	r3, #24
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f91c 	bl	8002240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3304      	adds	r3, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f917 	bl	8002240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <xTaskResumeAll+0x124>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	4a2a      	ldr	r2, [pc, #168]	@ (80030cc <xTaskResumeAll+0x124>)
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <xTaskResumeAll+0x128>)
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7ff f8a3 	bl	8002186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003044:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <xTaskResumeAll+0x12c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800304e:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <xTaskResumeAll+0x130>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003054:	4b1c      	ldr	r3, [pc, #112]	@ (80030c8 <xTaskResumeAll+0x120>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1cc      	bne.n	8002ff6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003062:	f000 fb37 	bl	80036d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003066:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <xTaskResumeAll+0x134>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003072:	f000 f847 	bl	8003104 <xTaskIncrementTick>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800307c:	4b16      	ldr	r3, [pc, #88]	@ (80030d8 <xTaskResumeAll+0x130>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3b01      	subs	r3, #1
 8003086:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f1      	bne.n	8003072 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800308e:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <xTaskResumeAll+0x134>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003094:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <xTaskResumeAll+0x130>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <xTaskResumeAll+0x138>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030b0:	f001 f8bc 	bl	800422c <vPortExitCritical>

	return xAlreadyYielded;
 80030b4:	68bb      	ldr	r3, [r7, #8]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200001c8 	.word	0x200001c8
 80030c4:	200001a0 	.word	0x200001a0
 80030c8:	20000160 	.word	0x20000160
 80030cc:	200001a8 	.word	0x200001a8
 80030d0:	200000cc 	.word	0x200000cc
 80030d4:	200000c8 	.word	0x200000c8
 80030d8:	200001b4 	.word	0x200001b4
 80030dc:	200001b0 	.word	0x200001b0
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <xTaskGetTickCount+0x1c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	200001a4 	.word	0x200001a4

08003104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800310e:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <xTaskIncrementTick+0x148>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8089 	bne.w	800322a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003118:	4b4d      	ldr	r3, [pc, #308]	@ (8003250 <xTaskIncrementTick+0x14c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003120:	4a4b      	ldr	r2, [pc, #300]	@ (8003250 <xTaskIncrementTick+0x14c>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d121      	bne.n	8003170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <xTaskIncrementTick+0x150>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xTaskIncrementTick+0x46>
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b40      	ldr	r3, [pc, #256]	@ (8003258 <xTaskIncrementTick+0x154>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3e      	ldr	r2, [pc, #248]	@ (8003254 <xTaskIncrementTick+0x150>)
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <xTaskIncrementTick+0x154>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <xTaskIncrementTick+0x158>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	4a3c      	ldr	r2, [pc, #240]	@ (800325c <xTaskIncrementTick+0x158>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	f000 fab2 	bl	80036d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d348      	bcc.n	800320c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <xTaskIncrementTick+0x150>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003184:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800318a:	601a      	str	r2, [r3, #0]
					break;
 800318c:	e03e      	b.n	800320c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d203      	bcs.n	80031ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <xTaskIncrementTick+0x15c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031ac:	e02e      	b.n	800320c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f844 	bl	8002240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff f83b 	bl	8002240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	2201      	movs	r2, #1
 80031d0:	409a      	lsls	r2, r3
 80031d2:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <xTaskIncrementTick+0x164>)
 80031ea:	441a      	add	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fe ffc7 	bl	8002186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <xTaskIncrementTick+0x168>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	429a      	cmp	r2, r3
 8003204:	d3b9      	bcc.n	800317a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320a:	e7b6      	b.n	800317a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800320c:	4b17      	ldr	r3, [pc, #92]	@ (800326c <xTaskIncrementTick+0x168>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003212:	4915      	ldr	r1, [pc, #84]	@ (8003268 <xTaskIncrementTick+0x164>)
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d907      	bls.n	8003234 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e004      	b.n	8003234 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <xTaskIncrementTick+0x16c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a0f      	ldr	r2, [pc, #60]	@ (8003270 <xTaskIncrementTick+0x16c>)
 8003232:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003234:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <xTaskIncrementTick+0x170>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003240:	697b      	ldr	r3, [r7, #20]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200001c8 	.word	0x200001c8
 8003250:	200001a4 	.word	0x200001a4
 8003254:	20000158 	.word	0x20000158
 8003258:	2000015c 	.word	0x2000015c
 800325c:	200001b8 	.word	0x200001b8
 8003260:	200001c0 	.word	0x200001c0
 8003264:	200001a8 	.word	0x200001a8
 8003268:	200000cc 	.word	0x200000cc
 800326c:	200000c8 	.word	0x200000c8
 8003270:	200001b0 	.word	0x200001b0
 8003274:	200001b4 	.word	0x200001b4

08003278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327e:	4b27      	ldr	r3, [pc, #156]	@ (800331c <vTaskSwitchContext+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003286:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <vTaskSwitchContext+0xa8>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800328c:	e040      	b.n	8003310 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <vTaskSwitchContext+0xa8>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <vTaskSwitchContext+0xac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	f1c3 031f 	rsb	r3, r3, #31
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	491f      	ldr	r1, [pc, #124]	@ (8003328 <vTaskSwitchContext+0xb0>)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <vTaskSwitchContext+0x5a>
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <vTaskSwitchContext+0xb0>)
 80032e2:	4413      	add	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3308      	adds	r3, #8
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d104      	bne.n	8003306 <vTaskSwitchContext+0x8e>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <vTaskSwitchContext+0xb4>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	200001c8 	.word	0x200001c8
 8003320:	200001b4 	.word	0x200001b4
 8003324:	200001a8 	.word	0x200001a8
 8003328:	200000cc 	.word	0x200000cc
 800332c:	200000c8 	.word	0x200000c8

08003330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	60fb      	str	r3, [r7, #12]
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <vTaskPlaceOnEventList+0x48>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3318      	adds	r3, #24
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe ff34 	bl	80021ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003366:	2101      	movs	r1, #1
 8003368:	6838      	ldr	r0, [r7, #0]
 800336a:	f000 fa79 	bl	8003860 <prvAddCurrentTaskToDelayedList>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200000c8 	.word	0x200000c8

0800337c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	617b      	str	r3, [r7, #20]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3318      	adds	r3, #24
 80033ac:	4619      	mov	r1, r3
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7fe fee9 	bl	8002186 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68b8      	ldr	r0, [r7, #8]
 80033c4:	f000 fa4c 	bl	8003860 <prvAddCurrentTaskToDelayedList>
	}
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200000c8 	.word	0x200000c8

080033d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60fb      	str	r3, [r7, #12]
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	3318      	adds	r3, #24
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ff1a 	bl	8002240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340c:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <xTaskRemoveFromEventList+0xb0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11c      	bne.n	800344e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3304      	adds	r3, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ff11 	bl	8002240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <xTaskRemoveFromEventList+0xb4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	4a16      	ldr	r2, [pc, #88]	@ (8003488 <xTaskRemoveFromEventList+0xb4>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4a13      	ldr	r2, [pc, #76]	@ (800348c <xTaskRemoveFromEventList+0xb8>)
 800343e:	441a      	add	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7fe fe9d 	bl	8002186 <vListInsertEnd>
 800344c:	e005      	b.n	800345a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3318      	adds	r3, #24
 8003452:	4619      	mov	r1, r3
 8003454:	480e      	ldr	r0, [pc, #56]	@ (8003490 <xTaskRemoveFromEventList+0xbc>)
 8003456:	f7fe fe96 	bl	8002186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <xTaskRemoveFromEventList+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	429a      	cmp	r2, r3
 8003466:	d905      	bls.n	8003474 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <xTaskRemoveFromEventList+0xc4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e001      	b.n	8003478 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003478:	697b      	ldr	r3, [r7, #20]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200001c8 	.word	0x200001c8
 8003488:	200001a8 	.word	0x200001a8
 800348c:	200000cc 	.word	0x200000cc
 8003490:	20000160 	.word	0x20000160
 8003494:	200000c8 	.word	0x200000c8
 8003498:	200001b4 	.word	0x200001b4

0800349c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <vTaskInternalSetTimeOutState+0x24>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <vTaskInternalSetTimeOutState+0x28>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	200001b8 	.word	0x200001b8
 80034c4:	200001a4 	.word	0x200001a4

080034c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60fb      	str	r3, [r7, #12]
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800350e:	f000 fe5b 	bl	80041c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003512:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <xTaskCheckForTimeOut+0xc0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800352a:	d102      	bne.n	8003532 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	e023      	b.n	800357a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <xTaskCheckForTimeOut+0xc4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d007      	beq.n	800354e <xTaskCheckForTimeOut+0x86>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e015      	b.n	800357a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d20b      	bcs.n	8003570 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	1ad2      	subs	r2, r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff99 	bl	800349c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	e004      	b.n	800357a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800357a:	f000 fe57 	bl	800422c <vPortExitCritical>

	return xReturn;
 800357e:	69fb      	ldr	r3, [r7, #28]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200001a4 	.word	0x200001a4
 800358c:	200001b8 	.word	0x200001b8

08003590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <vTaskMissedYield+0x14>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	200001b4 	.word	0x200001b4

080035a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035b0:	f000 f852 	bl	8003658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <prvIdleTask+0x28>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d9f9      	bls.n	80035b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <prvIdleTask+0x2c>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035cc:	e7f0      	b.n	80035b0 <prvIdleTask+0x8>
 80035ce:	bf00      	nop
 80035d0:	200000cc 	.word	0x200000cc
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	e00c      	b.n	80035fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <prvInitialiseTaskLists+0x60>)
 80035f0:	4413      	add	r3, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fd9a 	bl	800212c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3301      	adds	r3, #1
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d9ef      	bls.n	80035e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003604:	480d      	ldr	r0, [pc, #52]	@ (800363c <prvInitialiseTaskLists+0x64>)
 8003606:	f7fe fd91 	bl	800212c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800360a:	480d      	ldr	r0, [pc, #52]	@ (8003640 <prvInitialiseTaskLists+0x68>)
 800360c:	f7fe fd8e 	bl	800212c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003610:	480c      	ldr	r0, [pc, #48]	@ (8003644 <prvInitialiseTaskLists+0x6c>)
 8003612:	f7fe fd8b 	bl	800212c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003616:	480c      	ldr	r0, [pc, #48]	@ (8003648 <prvInitialiseTaskLists+0x70>)
 8003618:	f7fe fd88 	bl	800212c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800361c:	480b      	ldr	r0, [pc, #44]	@ (800364c <prvInitialiseTaskLists+0x74>)
 800361e:	f7fe fd85 	bl	800212c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <prvInitialiseTaskLists+0x78>)
 8003624:	4a05      	ldr	r2, [pc, #20]	@ (800363c <prvInitialiseTaskLists+0x64>)
 8003626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <prvInitialiseTaskLists+0x7c>)
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <prvInitialiseTaskLists+0x68>)
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200000cc 	.word	0x200000cc
 800363c:	20000130 	.word	0x20000130
 8003640:	20000144 	.word	0x20000144
 8003644:	20000160 	.word	0x20000160
 8003648:	20000174 	.word	0x20000174
 800364c:	2000018c 	.word	0x2000018c
 8003650:	20000158 	.word	0x20000158
 8003654:	2000015c 	.word	0x2000015c

08003658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365e:	e019      	b.n	8003694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003660:	f000 fdb2 	bl	80041c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003664:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <prvCheckTasksWaitingTermination+0x50>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fde5 	bl	8002240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <prvCheckTasksWaitingTermination+0x54>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	4a0b      	ldr	r2, [pc, #44]	@ (80036ac <prvCheckTasksWaitingTermination+0x54>)
 800367e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <prvCheckTasksWaitingTermination+0x58>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <prvCheckTasksWaitingTermination+0x58>)
 8003688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800368a:	f000 fdcf 	bl	800422c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f810 	bl	80036b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <prvCheckTasksWaitingTermination+0x58>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e1      	bne.n	8003660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000174 	.word	0x20000174
 80036ac:	200001a0 	.word	0x200001a0
 80036b0:	20000188 	.word	0x20000188

080036b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff6b 	bl	800459c <vPortFree>
			vPortFree( pxTCB );
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 ff68 	bl	800459c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <prvResetNextTaskUnblockTime+0x38>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <prvResetNextTaskUnblockTime+0x3c>)
 80036e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036ec:	e008      	b.n	8003700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ee:	4b07      	ldr	r3, [pc, #28]	@ (800370c <prvResetNextTaskUnblockTime+0x38>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <prvResetNextTaskUnblockTime+0x3c>)
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000158 	.word	0x20000158
 8003710:	200001c0 	.word	0x200001c0

08003714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800371a:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <xTaskGetSchedulerState+0x34>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003722:	2301      	movs	r3, #1
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	e008      	b.n	800373a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003728:	4b08      	ldr	r3, [pc, #32]	@ (800374c <xTaskGetSchedulerState+0x38>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003730:	2302      	movs	r3, #2
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	e001      	b.n	800373a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800373a:	687b      	ldr	r3, [r7, #4]
	}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	200001ac 	.word	0x200001ac
 800374c:	200001c8 	.word	0x200001c8

08003750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d070      	beq.n	8003848 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003766:	4b3b      	ldr	r3, [pc, #236]	@ (8003854 <xTaskPriorityDisinherit+0x104>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d00b      	beq.n	8003788 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60bb      	str	r3, [r7, #8]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d044      	beq.n	8003848 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d140      	bne.n	8003848 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fd38 	bl	8002240 <uxListRemove>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d115      	bne.n	8003802 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037da:	491f      	ldr	r1, [pc, #124]	@ (8003858 <xTaskPriorityDisinherit+0x108>)
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xTaskPriorityDisinherit+0xb2>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	4b18      	ldr	r3, [pc, #96]	@ (800385c <xTaskPriorityDisinherit+0x10c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4013      	ands	r3, r2
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <xTaskPriorityDisinherit+0x10c>)
 8003800:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380e:	f1c3 0205 	rsb	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	2201      	movs	r2, #1
 800381c:	409a      	lsls	r2, r3
 800381e:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <xTaskPriorityDisinherit+0x10c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <xTaskPriorityDisinherit+0x10c>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4a08      	ldr	r2, [pc, #32]	@ (8003858 <xTaskPriorityDisinherit+0x108>)
 8003836:	441a      	add	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f7fe fca1 	bl	8002186 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003848:	697b      	ldr	r3, [r7, #20]
	}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200000c8 	.word	0x200000c8
 8003858:	200000cc 	.word	0x200000cc
 800385c:	200001a8 	.word	0x200001a8

08003860 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xb0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003870:	4b28      	ldr	r3, [pc, #160]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fce2 	bl	8002240 <uxListRemove>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	2201      	movs	r2, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4013      	ands	r3, r2
 8003896:	4a20      	ldr	r2, [pc, #128]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d10a      	bne.n	80038b8 <prvAddCurrentTaskToDelayedList+0x58>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	481a      	ldr	r0, [pc, #104]	@ (800391c <prvAddCurrentTaskToDelayedList+0xbc>)
 80038b2:	f7fe fc68 	bl	8002186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038b6:	e026      	b.n	8003906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038c0:	4b14      	ldr	r3, [pc, #80]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d209      	bcs.n	80038e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d0:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7fe fc76 	bl	80021ce <vListInsert>
}
 80038e2:	e010      	b.n	8003906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4610      	mov	r0, r2
 80038f2:	f7fe fc6c 	bl	80021ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d202      	bcs.n	8003906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003900:	4a09      	ldr	r2, [pc, #36]	@ (8003928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200001a4 	.word	0x200001a4
 8003914:	200000c8 	.word	0x200000c8
 8003918:	200001a8 	.word	0x200001a8
 800391c:	2000018c 	.word	0x2000018c
 8003920:	2000015c 	.word	0x2000015c
 8003924:	20000158 	.word	0x20000158
 8003928:	200001c0 	.word	0x200001c0

0800392c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003936:	f000 fae1 	bl	8003efc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <xTimerCreateTimerTask+0x58>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003942:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <xTimerCreateTimerTask+0x5c>)
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2302      	movs	r3, #2
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003950:	490e      	ldr	r1, [pc, #56]	@ (800398c <xTimerCreateTimerTask+0x60>)
 8003952:	480f      	ldr	r0, [pc, #60]	@ (8003990 <xTimerCreateTimerTask+0x64>)
 8003954:	f7ff f956 	bl	8002c04 <xTaskCreate>
 8003958:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	603b      	str	r3, [r7, #0]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001fc 	.word	0x200001fc
 8003988:	20000200 	.word	0x20000200
 800398c:	0800487c 	.word	0x0800487c
 8003990:	08003acd 	.word	0x08003acd

08003994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	@ 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	623b      	str	r3, [r7, #32]
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039c4:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <xTimerGenericCommand+0x98>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d02a      	beq.n	8003a22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	dc18      	bgt.n	8003a10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039de:	f7ff fe99 	bl	8003714 <xTaskGetSchedulerState>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d109      	bne.n	80039fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039e8:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <xTimerGenericCommand+0x98>)
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	f107 0114 	add.w	r1, r7, #20
 80039f0:	2300      	movs	r3, #0
 80039f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f4:	f7fe fd18 	bl	8002428 <xQueueGenericSend>
 80039f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80039fa:	e012      	b.n	8003a22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <xTimerGenericCommand+0x98>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	f107 0114 	add.w	r1, r7, #20
 8003a04:	2300      	movs	r3, #0
 8003a06:	2200      	movs	r2, #0
 8003a08:	f7fe fd0e 	bl	8002428 <xQueueGenericSend>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a0e:	e008      	b.n	8003a22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <xTimerGenericCommand+0x98>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	f107 0114 	add.w	r1, r7, #20
 8003a18:	2300      	movs	r3, #0
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	f7fe fe06 	bl	800262c <xQueueGenericSendFromISR>
 8003a20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	@ 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200001fc 	.word	0x200001fc

08003a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <prvProcessExpiredTimer+0x98>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fbf9 	bl	8002240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d023      	beq.n	8003aa4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	18d1      	adds	r1, r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f000 f8d5 	bl	8003c18 <prvInsertTimerInActiveList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff88 	bl	8003994 <xTimerGenericCommand>
 8003a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d114      	bne.n	8003ab6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	4798      	blx	r3
}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200001f4 	.word	0x200001f4

08003acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ad4:	f107 0308 	add.w	r3, r7, #8
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f859 	bl	8003b90 <prvGetNextExpireTime>
 8003ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f805 	bl	8003af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003aea:	f000 f8d7 	bl	8003c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aee:	bf00      	nop
 8003af0:	e7f0      	b.n	8003ad4 <prvTimerTask+0x8>
	...

08003af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003afe:	f7ff fa45 	bl	8002f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f866 	bl	8003bd8 <prvSampleTimeNow>
 8003b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d130      	bne.n	8003b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <prvProcessTimerOrBlockTask+0x3c>
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d806      	bhi.n	8003b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b22:	f7ff fa41 	bl	8002fa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff81 	bl	8003a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b2e:	e024      	b.n	8003b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <prvProcessTimerOrBlockTask+0x90>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <prvProcessTimerOrBlockTask+0x50>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <prvProcessTimerOrBlockTask+0x52>
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b48:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <prvProcessTimerOrBlockTask+0x94>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7ff f821 	bl	8002b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b5a:	f7ff fa25 	bl	8002fa8 <xTaskResumeAll>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <prvProcessTimerOrBlockTask+0x98>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
}
 8003b74:	e001      	b.n	8003b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b76:	f7ff fa17 	bl	8002fa8 <xTaskResumeAll>
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200001f8 	.word	0x200001f8
 8003b88:	200001fc 	.word	0x200001fc
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <prvGetNextExpireTime+0x44>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <prvGetNextExpireTime+0x16>
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	e000      	b.n	8003ba8 <prvGetNextExpireTime+0x18>
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb4:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <prvGetNextExpireTime+0x44>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e001      	b.n	8003bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200001f4 	.word	0x200001f4

08003bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003be0:	f7ff fa80 	bl	80030e4 <xTaskGetTickCount>
 8003be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003be6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <prvSampleTimeNow+0x3c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d205      	bcs.n	8003bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bf0:	f000 f91e 	bl	8003e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e002      	b.n	8003c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c02:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <prvSampleTimeNow+0x3c>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c08:	68fb      	ldr	r3, [r7, #12]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000204 	.word	0x20000204

08003c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d812      	bhi.n	8003c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e01b      	b.n	8003c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <prvInsertTimerInActiveList+0x7c>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7fe fab6 	bl	80021ce <vListInsert>
 8003c62:	e012      	b.n	8003c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d206      	bcs.n	8003c7a <prvInsertTimerInActiveList+0x62>
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e007      	b.n	8003c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <prvInsertTimerInActiveList+0x80>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f7fe faa2 	bl	80021ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c8a:	697b      	ldr	r3, [r7, #20]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200001f8 	.word	0x200001f8
 8003c98:	200001f4 	.word	0x200001f4

08003c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ca2:	e0b2      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f2c0 80af 	blt.w	8003e0a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fabf 	bl	8002240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff87 	bl	8003bd8 <prvSampleTimeNow>
 8003cca:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b09      	cmp	r3, #9
 8003cd0:	f200 8098 	bhi.w	8003e04 <prvProcessReceivedCommands+0x168>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <prvProcessReceivedCommands+0x40>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003d7b 	.word	0x08003d7b
 8003cec:	08003d8f 	.word	0x08003d8f
 8003cf0:	08003ddb 	.word	0x08003ddb
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d05 	.word	0x08003d05
 8003cfc:	08003d7b 	.word	0x08003d7b
 8003d00:	08003d8f 	.word	0x08003d8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	18d1      	adds	r1, r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d24:	f7ff ff78 	bl	8003c18 <prvInsertTimerInActiveList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d06c      	beq.n	8003e08 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d061      	beq.n	8003e08 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d56:	f7ff fe1d 	bl	8003994 <xTimerGenericCommand>
 8003d5a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d152      	bne.n	8003e08 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	61bb      	str	r3, [r7, #24]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003d8c:	e03d      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	617b      	str	r3, [r7, #20]
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	18d1      	adds	r1, r2, r3
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dd4:	f7ff ff20 	bl	8003c18 <prvInsertTimerInActiveList>
					break;
 8003dd8:	e017      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8003de8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dea:	f000 fbd7 	bl	800459c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003dee:	e00c      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e02:	e002      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <prvProcessReceivedCommands+0x16e>
					break;
 8003e08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <prvProcessReceivedCommands+0x190>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f107 0108 	add.w	r1, r7, #8
 8003e12:	2200      	movs	r2, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fca5 	bl	8002764 <xQueueReceive>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af41 	bne.w	8003ca4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3728      	adds	r7, #40	@ 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200001fc 	.word	0x200001fc

08003e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e36:	e049      	b.n	8003ecc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe f9f5 	bl	8002240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02f      	beq.n	8003ecc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90e      	bls.n	8003e9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe f99a 	bl	80021ce <vListInsert>
 8003e9a:	e017      	b.n	8003ecc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff fd74 	bl	8003994 <xTimerGenericCommand>
 8003eac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	603b      	str	r3, [r7, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ecc:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1b0      	bne.n	8003e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ed6:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <prvSwitchTimerLists+0xc8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <prvSwitchTimerLists+0xc4>)
 8003ee2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ee4:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <prvSwitchTimerLists+0xc8>)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200001f4 	.word	0x200001f4
 8003ef8:	200001f8 	.word	0x200001f8

08003efc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f00:	f000 f962 	bl	80041c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f04:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <prvCheckForValidListAndQueue+0x54>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f0c:	4811      	ldr	r0, [pc, #68]	@ (8003f54 <prvCheckForValidListAndQueue+0x58>)
 8003f0e:	f7fe f90d 	bl	800212c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f12:	4811      	ldr	r0, [pc, #68]	@ (8003f58 <prvCheckForValidListAndQueue+0x5c>)
 8003f14:	f7fe f90a 	bl	800212c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f18:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <prvCheckForValidListAndQueue+0x60>)
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f54 <prvCheckForValidListAndQueue+0x58>)
 8003f1c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <prvCheckForValidListAndQueue+0x64>)
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <prvCheckForValidListAndQueue+0x5c>)
 8003f22:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f24:	2200      	movs	r2, #0
 8003f26:	210c      	movs	r1, #12
 8003f28:	200a      	movs	r0, #10
 8003f2a:	f7fe fa1d 	bl	8002368 <xQueueGenericCreate>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a07      	ldr	r2, [pc, #28]	@ (8003f50 <prvCheckForValidListAndQueue+0x54>)
 8003f32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <prvCheckForValidListAndQueue+0x54>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f3c:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <prvCheckForValidListAndQueue+0x54>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4908      	ldr	r1, [pc, #32]	@ (8003f64 <prvCheckForValidListAndQueue+0x68>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fe00 	bl	8002b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f000 f970 	bl	800422c <vPortExitCritical>
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200001fc 	.word	0x200001fc
 8003f54:	200001cc 	.word	0x200001cc
 8003f58:	200001e0 	.word	0x200001e0
 8003f5c:	200001f4 	.word	0x200001f4
 8003f60:	200001f8 	.word	0x200001f8
 8003f64:	08004884 	.word	0x08004884

08003f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3b04      	subs	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3b04      	subs	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b04      	subs	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f98:	4a0c      	ldr	r2, [pc, #48]	@ (8003fcc <pxPortInitialiseStack+0x64>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b14      	subs	r3, #20
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b04      	subs	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f06f 0202 	mvn.w	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b20      	subs	r3, #32
 8003fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	08003fd1 	.word	0x08003fd1

08003fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fda:	4b13      	ldr	r3, [pc, #76]	@ (8004028 <prvTaskExitError+0x58>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe2:	d00b      	beq.n	8003ffc <prvTaskExitError+0x2c>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <prvTaskExitError+0x28>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	60bb      	str	r3, [r7, #8]
}
 800400e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004010:	bf00      	nop
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0fc      	beq.n	8004012 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c
 800402c:	00000000 	.word	0x00000000

08004030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004030:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <pxCurrentTCBConst2>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	6808      	ldr	r0, [r1, #0]
 8004036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	f380 8809 	msr	PSP, r0
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8811 	msr	BASEPRI, r0
 800404a:	4770      	bx	lr
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst2>:
 8004050:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004058:	4808      	ldr	r0, [pc, #32]	@ (800407c <prvPortStartFirstTask+0x24>)
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f380 8808 	msr	MSP, r0
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8814 	msr	CONTROL, r0
 800406a:	b662      	cpsie	i
 800406c:	b661      	cpsie	f
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	df00      	svc	0
 8004078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800407a:	bf00      	nop
 800407c:	e000ed08 	.word	0xe000ed08

08004080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <xPortStartScheduler+0x124>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a47      	ldr	r2, [pc, #284]	@ (80041a8 <xPortStartScheduler+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10b      	bne.n	80040a8 <xPortStartScheduler+0x28>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040a8:	4b3e      	ldr	r3, [pc, #248]	@ (80041a4 <xPortStartScheduler+0x124>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3f      	ldr	r2, [pc, #252]	@ (80041ac <xPortStartScheduler+0x12c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10b      	bne.n	80040ca <xPortStartScheduler+0x4a>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ca:	4b39      	ldr	r3, [pc, #228]	@ (80041b0 <xPortStartScheduler+0x130>)
 80040cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	22ff      	movs	r2, #255	@ 0xff
 80040da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b31      	ldr	r3, [pc, #196]	@ (80041b4 <xPortStartScheduler+0x134>)
 80040f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040f2:	4b31      	ldr	r3, [pc, #196]	@ (80041b8 <xPortStartScheduler+0x138>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040f8:	e009      	b.n	800410e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80040fa:	4b2f      	ldr	r3, [pc, #188]	@ (80041b8 <xPortStartScheduler+0x138>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3b01      	subs	r3, #1
 8004100:	4a2d      	ldr	r2, [pc, #180]	@ (80041b8 <xPortStartScheduler+0x138>)
 8004102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d0ef      	beq.n	80040fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800411a:	4b27      	ldr	r3, [pc, #156]	@ (80041b8 <xPortStartScheduler+0x138>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	d00b      	beq.n	800413e <xPortStartScheduler+0xbe>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800413e:	4b1e      	ldr	r3, [pc, #120]	@ (80041b8 <xPortStartScheduler+0x138>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <xPortStartScheduler+0x138>)
 8004146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004148:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <xPortStartScheduler+0x138>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <xPortStartScheduler+0x138>)
 8004152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	b2da      	uxtb	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800415c:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <xPortStartScheduler+0x13c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a16      	ldr	r2, [pc, #88]	@ (80041bc <xPortStartScheduler+0x13c>)
 8004162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <xPortStartScheduler+0x13c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <xPortStartScheduler+0x13c>)
 800416e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004174:	f000 f8da 	bl	800432c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <xPortStartScheduler+0x140>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800417e:	f000 f8f9 	bl	8004374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <xPortStartScheduler+0x144>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a0f      	ldr	r2, [pc, #60]	@ (80041c4 <xPortStartScheduler+0x144>)
 8004188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800418c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800418e:	f7ff ff63 	bl	8004058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004192:	f7ff f871 	bl	8003278 <vTaskSwitchContext>
	prvTaskExitError();
 8004196:	f7ff ff1b 	bl	8003fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000ed00 	.word	0xe000ed00
 80041a8:	410fc271 	.word	0x410fc271
 80041ac:	410fc270 	.word	0x410fc270
 80041b0:	e000e400 	.word	0xe000e400
 80041b4:	20000208 	.word	0x20000208
 80041b8:	2000020c 	.word	0x2000020c
 80041bc:	e000ed20 	.word	0xe000ed20
 80041c0:	2000000c 	.word	0x2000000c
 80041c4:	e000ef34 	.word	0xe000ef34

080041c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
}
 80041e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <vPortEnterCritical+0x5c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004224 <vPortEnterCritical+0x5c>)
 80041ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <vPortEnterCritical+0x5c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d110      	bne.n	8004216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <vPortEnterCritical+0x60>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <vPortEnterCritical+0x4e>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	e7fd      	b.n	8004212 <vPortEnterCritical+0x4a>
	}
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <vPortExitCritical+0x26>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	607b      	str	r3, [r7, #4]
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	4a08      	ldr	r2, [pc, #32]	@ (800427c <vPortExitCritical+0x50>)
 800425a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800425c:	4b07      	ldr	r3, [pc, #28]	@ (800427c <vPortExitCritical+0x50>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <vPortExitCritical+0x44>
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	2000000c 	.word	0x2000000c

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f01e 0f10 	tst.w	lr, #16
 8004290:	bf08      	it	eq
 8004292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	6010      	str	r0, [r2, #0]
 800429c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042a4:	f380 8811 	msr	BASEPRI, r0
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f7fe ffe2 	bl	8003278 <vTaskSwitchContext>
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f380 8811 	msr	BASEPRI, r0
 80042bc:	bc09      	pop	{r0, r3}
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c6:	f01e 0f10 	tst.w	lr, #16
 80042ca:	bf08      	it	eq
 80042cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042d0:	f380 8809 	msr	PSP, r0
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst>:
 80042e0:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004302:	f7fe feff 	bl	8003104 <xTaskIncrementTick>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <SysTick_Handler+0x40>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
}
 800431e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <vPortSetupTimerInterrupt+0x38>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800433c:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <vPortSetupTimerInterrupt+0x3c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <vPortSetupTimerInterrupt+0x40>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	4a09      	ldr	r2, [pc, #36]	@ (8004370 <vPortSetupTimerInterrupt+0x44>)
 800434a:	3b01      	subs	r3, #1
 800434c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800434e:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <vPortSetupTimerInterrupt+0x34>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010
 8004364:	e000e018 	.word	0xe000e018
 8004368:	20000000 	.word	0x20000000
 800436c:	10624dd3 	.word	0x10624dd3
 8004370:	e000e014 	.word	0xe000e014

08004374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004384 <vPortEnableVFP+0x10>
 8004378:	6801      	ldr	r1, [r0, #0]
 800437a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800437e:	6001      	str	r1, [r0, #0]
 8004380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004382:	bf00      	nop
 8004384:	e000ed88 	.word	0xe000ed88

08004388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800438e:	f3ef 8305 	mrs	r3, IPSR
 8004392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d915      	bls.n	80043c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800439a:	4a18      	ldr	r2, [pc, #96]	@ (80043fc <vPortValidateInterruptPriority+0x74>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043a4:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <vPortValidateInterruptPriority+0x78>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	7afa      	ldrb	r2, [r7, #11]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d20b      	bcs.n	80043c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	e7fd      	b.n	80043c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <vPortValidateInterruptPriority+0x7c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <vPortValidateInterruptPriority+0x80>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d90b      	bls.n	80043ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	603b      	str	r3, [r7, #0]
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	e7fd      	b.n	80043ea <vPortValidateInterruptPriority+0x62>
	}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000e3f0 	.word	0xe000e3f0
 8004400:	20000208 	.word	0x20000208
 8004404:	e000ed0c 	.word	0xe000ed0c
 8004408:	2000020c 	.word	0x2000020c

0800440c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	@ 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004418:	f7fe fdb8 	bl	8002f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800441c:	4b5a      	ldr	r3, [pc, #360]	@ (8004588 <pvPortMalloc+0x17c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004424:	f000 f916 	bl	8004654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004428:	4b58      	ldr	r3, [pc, #352]	@ (800458c <pvPortMalloc+0x180>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 8090 	bne.w	8004556 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01e      	beq.n	800447a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800443c:	2208      	movs	r2, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f023 0307 	bic.w	r3, r3, #7
 8004454:	3308      	adds	r3, #8
 8004456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <pvPortMalloc+0x6e>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	617b      	str	r3, [r7, #20]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d06a      	beq.n	8004556 <pvPortMalloc+0x14a>
 8004480:	4b43      	ldr	r3, [pc, #268]	@ (8004590 <pvPortMalloc+0x184>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d865      	bhi.n	8004556 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800448a:	4b42      	ldr	r3, [pc, #264]	@ (8004594 <pvPortMalloc+0x188>)
 800448c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <pvPortMalloc+0x188>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004494:	e004      	b.n	80044a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d903      	bls.n	80044b2 <pvPortMalloc+0xa6>
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f1      	bne.n	8004496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044b2:	4b35      	ldr	r3, [pc, #212]	@ (8004588 <pvPortMalloc+0x17c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d04c      	beq.n	8004556 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	4413      	add	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad2      	subs	r2, r2, r3
 80044d6:	2308      	movs	r3, #8
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	429a      	cmp	r2, r3
 80044dc:	d920      	bls.n	8004520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <pvPortMalloc+0xfc>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800451a:	69b8      	ldr	r0, [r7, #24]
 800451c:	f000 f8fc 	bl	8004718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <pvPortMalloc+0x184>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <pvPortMalloc+0x184>)
 800452c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800452e:	4b18      	ldr	r3, [pc, #96]	@ (8004590 <pvPortMalloc+0x184>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <pvPortMalloc+0x18c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d203      	bcs.n	8004542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <pvPortMalloc+0x184>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <pvPortMalloc+0x18c>)
 8004540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <pvPortMalloc+0x180>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	431a      	orrs	r2, r3
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004556:	f7fe fd27 	bl	8002fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <pvPortMalloc+0x170>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <pvPortMalloc+0x16c>
	return pvReturn;
 800457c:	69fb      	ldr	r3, [r7, #28]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3728      	adds	r7, #40	@ 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20012e18 	.word	0x20012e18
 800458c:	20012e24 	.word	0x20012e24
 8004590:	20012e1c 	.word	0x20012e1c
 8004594:	20012e10 	.word	0x20012e10
 8004598:	20012e20 	.word	0x20012e20

0800459c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04a      	beq.n	8004644 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045ae:	2308      	movs	r3, #8
 80045b0:	425b      	negs	r3, r3
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4413      	add	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	4b22      	ldr	r3, [pc, #136]	@ (800464c <vPortFree+0xb0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <vPortFree+0x46>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <vPortFree+0x66>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60bb      	str	r3, [r7, #8]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4b11      	ldr	r3, [pc, #68]	@ (800464c <vPortFree+0xb0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d019      	beq.n	8004644 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d115      	bne.n	8004644 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <vPortFree+0xb0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004628:	f7fe fcb0 	bl	8002f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <vPortFree+0xb4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4413      	add	r3, r2
 8004636:	4a06      	ldr	r2, [pc, #24]	@ (8004650 <vPortFree+0xb4>)
 8004638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800463a:	6938      	ldr	r0, [r7, #16]
 800463c:	f000 f86c 	bl	8004718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004640:	f7fe fcb2 	bl	8002fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20012e24 	.word	0x20012e24
 8004650:	20012e1c 	.word	0x20012e1c

08004654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800465a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800465e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004660:	4b27      	ldr	r3, [pc, #156]	@ (8004700 <prvHeapInit+0xac>)
 8004662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3307      	adds	r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0307 	bic.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	4a1f      	ldr	r2, [pc, #124]	@ (8004700 <prvHeapInit+0xac>)
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800468c:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <prvHeapInit+0xb0>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004692:	4b1c      	ldr	r3, [pc, #112]	@ (8004704 <prvHeapInit+0xb0>)
 8004694:	2200      	movs	r2, #0
 8004696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046a0:	2208      	movs	r2, #8
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <prvHeapInit+0xb4>)
 80046b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <prvHeapInit+0xb4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046be:	4b12      	ldr	r3, [pc, #72]	@ (8004708 <prvHeapInit+0xb4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004708 <prvHeapInit+0xb4>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <prvHeapInit+0xb8>)
 80046e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <prvHeapInit+0xbc>)
 80046ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <prvHeapInit+0xc0>)
 80046ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000210 	.word	0x20000210
 8004704:	20012e10 	.word	0x20012e10
 8004708:	20012e18 	.word	0x20012e18
 800470c:	20012e20 	.word	0x20012e20
 8004710:	20012e1c 	.word	0x20012e1c
 8004714:	20012e24 	.word	0x20012e24

08004718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004720:	4b28      	ldr	r3, [pc, #160]	@ (80047c4 <prvInsertBlockIntoFreeList+0xac>)
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <prvInsertBlockIntoFreeList+0x14>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d8f7      	bhi.n	8004726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4413      	add	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d108      	bne.n	800475a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d118      	bne.n	80047a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d00d      	beq.n	8004796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e008      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004796:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e003      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d002      	beq.n	80047b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20012e10 	.word	0x20012e10
 80047c8:	20012e18 	.word	0x20012e18

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <__libc_init_array>:
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4d0d      	ldr	r5, [pc, #52]	@ (8004814 <__libc_init_array+0x38>)
 80047e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004818 <__libc_init_array+0x3c>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	2600      	movs	r6, #0
 80047e8:	42a6      	cmp	r6, r4
 80047ea:	d109      	bne.n	8004800 <__libc_init_array+0x24>
 80047ec:	4d0b      	ldr	r5, [pc, #44]	@ (800481c <__libc_init_array+0x40>)
 80047ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004820 <__libc_init_array+0x44>)
 80047f0:	f000 f826 	bl	8004840 <_init>
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	2600      	movs	r6, #0
 80047fa:	42a6      	cmp	r6, r4
 80047fc:	d105      	bne.n	800480a <__libc_init_array+0x2e>
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	f855 3b04 	ldr.w	r3, [r5], #4
 8004804:	4798      	blx	r3
 8004806:	3601      	adds	r6, #1
 8004808:	e7ee      	b.n	80047e8 <__libc_init_array+0xc>
 800480a:	f855 3b04 	ldr.w	r3, [r5], #4
 800480e:	4798      	blx	r3
 8004810:	3601      	adds	r6, #1
 8004812:	e7f2      	b.n	80047fa <__libc_init_array+0x1e>
 8004814:	080048ac 	.word	0x080048ac
 8004818:	080048ac 	.word	0x080048ac
 800481c:	080048ac 	.word	0x080048ac
 8004820:	080048b0 	.word	0x080048b0

08004824 <memcpy>:
 8004824:	440a      	add	r2, r1
 8004826:	4291      	cmp	r1, r2
 8004828:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800482c:	d100      	bne.n	8004830 <memcpy+0xc>
 800482e:	4770      	bx	lr
 8004830:	b510      	push	{r4, lr}
 8004832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800483a:	4291      	cmp	r1, r2
 800483c:	d1f9      	bne.n	8004832 <memcpy+0xe>
 800483e:	bd10      	pop	{r4, pc}

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
